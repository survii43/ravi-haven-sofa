{"ast":null,"code":"var _jsxFileName = \"/home/sourav_choudhary/Desktop/havensofa/haven-sofa/src/admin/MyTable.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import { render } from 'react-dom';\n// import { TableContainer, Table, TableHead, TableBody, TableRow, TableCell, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, Button, TextField } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n// import AddIcon from '@mui/icons-material/Add';\n\n// const dummyData = [\n//   { id: 1, name: 'John', age: 30, email: 'john@example.com' },\n//   { id: 2, name: 'Doe', age: 25, email: 'doe@example.com' },\n//   { id: 3, name: 'Jane', age: 35, email: 'jane@example.com' },\n// ];\n\n// const MyTable = () => {\n//   const [data, setData] = useState(dummyData);\n//   const [editDialogOpen, setEditDialogOpen] = useState(false);\n//   const [addDialogOpen, setAddDialogOpen] = useState(false);\n//   const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n//   const [selectedId, setSelectedId] = useState(null);\n//   const [editedData, setEditedData] = useState({});\n//   const [newData, setNewData] = useState({});\n\n//   const handleEditClick = (id) => {\n//     const selectedRow = data.find((item) => item.id === id);\n//     setEditedData(selectedRow);\n//     setSelectedId(id);\n//     setEditDialogOpen(true);\n//   };\n\n//   const handleAddClick = () => {\n//     setAddDialogOpen(true);\n//   };\n\n//   const handleDeleteClick = (id) => {\n//     setSelectedId(id);\n//     setDeleteDialogOpen(true);\n//   };\n\n//   const handleEditSave = () => {\n//     setData((prevData) =>\n//       prevData.map((item) => (item.id === selectedId ? editedData : item))\n//     );\n//     setEditDialogOpen(false);\n//   };\n\n//   const handleAddSave = () => {\n//     const id = data.length + 1;\n//     setData([...data, { ...newData, id }]);\n//     setAddDialogOpen(false);\n//   };\n\n//   const handleDeleteConfirm = () => {\n//     setData((prevData) => prevData.filter((item) => item.id !== selectedId));\n//     setDeleteDialogOpen(false);\n//   };\n\n//   return (\n//     <>\n//       <TableContainer>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Age</TableCell>\n//               <TableCell>Email</TableCell>\n//               <TableCell>Action</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {data.map((row) => (\n//               <TableRow key={row.id}>\n//                 <TableCell>{row.name}</TableCell>\n//                 <TableCell>{row.age}</TableCell>\n//                 <TableCell>{row.email}</TableCell>\n//                 <TableCell>\n//                   <IconButton onClick={() => handleEditClick(row.id)}>\n//                     <EditIcon />\n//                   </IconButton>\n//                   <IconButton onClick={() => handleDeleteClick(row.id)}>\n//                     <DeleteIcon />\n//                   </IconButton>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Edit Dialog */}\n//       <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)}>\n//         <DialogTitle>Edit Data</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText>Edit the data fields:</DialogContentText>\n//           <TextField\n//             label=\"Name\"\n//             value={editedData.name || ''}\n//             onChange={(e) =>\n//               setEditedData({ ...editedData, name: e.target.value })\n//             }\n//           />\n//           <TextField\n//             label=\"Age\"\n//             value={editedData.age || ''}\n//             onChange={(e) =>\n//               setEditedData({ ...editedData, age: e.target.value })\n//             }\n//           />\n//           <TextField\n//             label=\"Email\"\n//             value={editedData.email || ''}\n//             onChange={(e) =>\n//               setEditedData({ ...editedData, email: e.target.value })\n//             }\n//           />\n//           <Button onClick={handleEditSave}>Save</Button>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Add Dialog */}\n//       <Dialog open={addDialogOpen} onClose={() => setAddDialogOpen(false)}>\n//         <DialogTitle>Add New Entry</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText>Enter the new data:</DialogContentText>\n//           <TextField\n//             label=\"Name\"\n//             value={newData.name || ''}\n//             onChange={(e) =>\n//               setNewData({ ...newData, name: e.target.value })\n//             }\n//           />\n//           <TextField\n//             label=\"Age\"\n//             value={newData.age || ''}\n//             onChange={(e) =>\n//               setNewData({ ...newData, age: e.target.value })\n//             }\n//           />\n//           <TextField\n//             label=\"Email\"\n//             value={newData.email || ''}\n//             onChange={(e) =>\n//               setNewData({ ...newData, email: e.target.value })\n//             }\n//           />\n//           <Button onClick={handleAddSave}>Add</Button>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Delete Confirmation Dialog */}\n//       <Dialog\n//         open={deleteDialogOpen}\n//         onClose={() => setDeleteDialogOpen(false)}\n//       >\n//         <DialogTitle>Delete Confirmation</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText>\n//             Are you sure you want to delete this record?\n//           </DialogContentText>\n//           <Button onClick={handleDeleteConfirm}>Confirm</Button>\n//           <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Add Button */}\n//       <IconButton onClick={handleAddClick}>\n//         <AddIcon />\n//       </IconButton>\n//     </>\n//   );\n// };\n\n// export default MyTable;\n\nimport React, { useEffect, useState } from 'react';\nimport { TableContainer, Table, TableHead, TableBody, TableRow, TableCell, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, Button, TextField } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport firebase from '../firebase/firebase';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MyTable = () => {\n  _s();\n  const [imageUrls, setImageUrls] = useState([]);\n  const [editDialogOpen, setEditDialogOpen] = useState(false);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [selectedId, setSelectedId] = useState(null);\n  const [editedData, setEditedData] = useState({});\n  useEffect(() => {\n    const fetchImages = async () => {\n      try {\n        const storageRef = firebase.storage().ref();\n        const imagesRef = storageRef.child('hero_section');\n        const imageList = await imagesRef.listAll();\n        // Get download URLs for each image\n        const urls = await Promise.all(imageList.items.map(async imageRef => {\n          return await imageRef.getDownloadURL();\n        }));\n        setImageUrls(urls);\n      } catch (error) {\n        console.error('Error fetching images:', error);\n      }\n    };\n    fetchImages();\n  }, []);\n  const handleEditClick = id => {\n    // Handle edit action here\n  };\n  const handleUpload = async () => {\n    try {\n      if (!file) {\n        console.error('No file selected.');\n        return;\n      }\n      const storageRef = firebase.storage().ref();\n      const fileRef = storageRef.child(`hero_section/${fileName}`);\n      await fileRef.put(file);\n      console.log('File uploaded successfully.');\n\n      // Clear input field after successful upload\n      setFile(null);\n      setFileName('');\n    } catch (error) {\n      console.error('Error uploading file:', error);\n    }\n  };\n  const handleDeleteClick = id => {\n    setSelectedId(id);\n    setDeleteDialogOpen(true);\n  };\n  const handleEditSave = () => {\n    // Handle edit save action here\n    setEditDialogOpen(false);\n  };\n  const handleDeleteConfirm = async () => {\n    try {\n      const imageUrl = imageUrls[selectedId];\n      // Delete image from Firebase Storage\n      const storageRef = firebase.storage().refFromURL(imageUrl);\n      await storageRef.delete();\n\n      // Update state to remove deleted image\n      setImageUrls(prevImageUrls => prevImageUrls.filter((url, index) => index !== selectedId));\n    } catch (error) {\n      console.error('Error deleting image:', error);\n    }\n    setDeleteDialogOpen(false);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"image/*\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"File Name\",\n        value: fileName,\n        disabled: true,\n        fullWidth: true,\n        sx: {\n          mt: 1\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        color: \"primary\",\n        onClick: handleUpload,\n        disabled: !file,\n        sx: {\n          mt: 1\n        },\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 287,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Action\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 288,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: imageUrls.map((url, index) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: url,\n                alt: `Image ${index}`,\n                width: \"50\",\n                height: \"50\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 295,\n                columnNumber: 37\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: [/*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => handleEditClick(index),\n                children: /*#__PURE__*/_jsxDEV(EditIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 299,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 298,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n                onClick: () => handleDeleteClick(index),\n                children: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 302,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 301,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 33\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: editDialogOpen,\n      onClose: () => setEditDialogOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Edit Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Edit the image details:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleEditSave,\n          children: \"Save\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Dialog, {\n      open: deleteDialogOpen,\n      onClose: () => setDeleteDialogOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Delete Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: \"Are you sure you want to delete this image?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: handleDeleteConfirm,\n          children: \"Confirm\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => setDeleteDialogOpen(false),\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(MyTable, \"438mead27Y43aQQERz1QB1xrUV0=\");\n_c = MyTable;\nexport default MyTable;\nvar _c;\n$RefreshReg$(_c, \"MyTable\");","map":{"version":3,"names":["React","useEffect","useState","TableContainer","Table","TableHead","TableBody","TableRow","TableCell","IconButton","Dialog","DialogTitle","DialogContent","DialogContentText","Button","TextField","DeleteIcon","EditIcon","firebase","jsxDEV","_jsxDEV","Fragment","_Fragment","MyTable","_s","imageUrls","setImageUrls","editDialogOpen","setEditDialogOpen","deleteDialogOpen","setDeleteDialogOpen","selectedId","setSelectedId","editedData","setEditedData","fetchImages","storageRef","storage","ref","imagesRef","child","imageList","listAll","urls","Promise","all","items","map","imageRef","getDownloadURL","error","console","handleEditClick","id","handleUpload","file","fileRef","fileName","put","log","setFile","setFileName","handleDeleteClick","handleEditSave","handleDeleteConfirm","imageUrl","refFromURL","delete","prevImageUrls","filter","url","index","children","type","accept","onChange","handleFileChange","_jsxFileName","lineNumber","columnNumber","label","value","disabled","fullWidth","sx","mt","variant","color","onClick","src","alt","width","height","open","onClose","_c","$RefreshReg$"],"sources":["/home/sourav_choudhary/Desktop/havensofa/haven-sofa/src/admin/MyTable.js"],"sourcesContent":["// import React, { useState } from 'react';\n// import { render } from 'react-dom';\n// import { TableContainer, Table, TableHead, TableBody, TableRow, TableCell, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, Button, TextField } from '@mui/material';\n// import DeleteIcon from '@mui/icons-material/Delete';\n// import EditIcon from '@mui/icons-material/Edit';\n// import AddIcon from '@mui/icons-material/Add';\n\n// const dummyData = [\n//   { id: 1, name: 'John', age: 30, email: 'john@example.com' },\n//   { id: 2, name: 'Doe', age: 25, email: 'doe@example.com' },\n//   { id: 3, name: 'Jane', age: 35, email: 'jane@example.com' },\n// ];\n\n// const MyTable = () => {\n//   const [data, setData] = useState(dummyData);\n//   const [editDialogOpen, setEditDialogOpen] = useState(false);\n//   const [addDialogOpen, setAddDialogOpen] = useState(false);\n//   const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n//   const [selectedId, setSelectedId] = useState(null);\n//   const [editedData, setEditedData] = useState({});\n//   const [newData, setNewData] = useState({});\n\n//   const handleEditClick = (id) => {\n//     const selectedRow = data.find((item) => item.id === id);\n//     setEditedData(selectedRow);\n//     setSelectedId(id);\n//     setEditDialogOpen(true);\n//   };\n\n//   const handleAddClick = () => {\n//     setAddDialogOpen(true);\n//   };\n\n//   const handleDeleteClick = (id) => {\n//     setSelectedId(id);\n//     setDeleteDialogOpen(true);\n//   };\n\n//   const handleEditSave = () => {\n//     setData((prevData) =>\n//       prevData.map((item) => (item.id === selectedId ? editedData : item))\n//     );\n//     setEditDialogOpen(false);\n//   };\n\n//   const handleAddSave = () => {\n//     const id = data.length + 1;\n//     setData([...data, { ...newData, id }]);\n//     setAddDialogOpen(false);\n//   };\n\n//   const handleDeleteConfirm = () => {\n//     setData((prevData) => prevData.filter((item) => item.id !== selectedId));\n//     setDeleteDialogOpen(false);\n//   };\n\n//   return (\n//     <>\n//       <TableContainer>\n//         <Table>\n//           <TableHead>\n//             <TableRow>\n//               <TableCell>Name</TableCell>\n//               <TableCell>Age</TableCell>\n//               <TableCell>Email</TableCell>\n//               <TableCell>Action</TableCell>\n//             </TableRow>\n//           </TableHead>\n//           <TableBody>\n//             {data.map((row) => (\n//               <TableRow key={row.id}>\n//                 <TableCell>{row.name}</TableCell>\n//                 <TableCell>{row.age}</TableCell>\n//                 <TableCell>{row.email}</TableCell>\n//                 <TableCell>\n//                   <IconButton onClick={() => handleEditClick(row.id)}>\n//                     <EditIcon />\n//                   </IconButton>\n//                   <IconButton onClick={() => handleDeleteClick(row.id)}>\n//                     <DeleteIcon />\n//                   </IconButton>\n//                 </TableCell>\n//               </TableRow>\n//             ))}\n//           </TableBody>\n//         </Table>\n//       </TableContainer>\n\n//       {/* Edit Dialog */}\n//       <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)}>\n//         <DialogTitle>Edit Data</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText>Edit the data fields:</DialogContentText>\n//           <TextField\n//             label=\"Name\"\n//             value={editedData.name || ''}\n//             onChange={(e) =>\n//               setEditedData({ ...editedData, name: e.target.value })\n//             }\n//           />\n//           <TextField\n//             label=\"Age\"\n//             value={editedData.age || ''}\n//             onChange={(e) =>\n//               setEditedData({ ...editedData, age: e.target.value })\n//             }\n//           />\n//           <TextField\n//             label=\"Email\"\n//             value={editedData.email || ''}\n//             onChange={(e) =>\n//               setEditedData({ ...editedData, email: e.target.value })\n//             }\n//           />\n//           <Button onClick={handleEditSave}>Save</Button>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Add Dialog */}\n//       <Dialog open={addDialogOpen} onClose={() => setAddDialogOpen(false)}>\n//         <DialogTitle>Add New Entry</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText>Enter the new data:</DialogContentText>\n//           <TextField\n//             label=\"Name\"\n//             value={newData.name || ''}\n//             onChange={(e) =>\n//               setNewData({ ...newData, name: e.target.value })\n//             }\n//           />\n//           <TextField\n//             label=\"Age\"\n//             value={newData.age || ''}\n//             onChange={(e) =>\n//               setNewData({ ...newData, age: e.target.value })\n//             }\n//           />\n//           <TextField\n//             label=\"Email\"\n//             value={newData.email || ''}\n//             onChange={(e) =>\n//               setNewData({ ...newData, email: e.target.value })\n//             }\n//           />\n//           <Button onClick={handleAddSave}>Add</Button>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Delete Confirmation Dialog */}\n//       <Dialog\n//         open={deleteDialogOpen}\n//         onClose={() => setDeleteDialogOpen(false)}\n//       >\n//         <DialogTitle>Delete Confirmation</DialogTitle>\n//         <DialogContent>\n//           <DialogContentText>\n//             Are you sure you want to delete this record?\n//           </DialogContentText>\n//           <Button onClick={handleDeleteConfirm}>Confirm</Button>\n//           <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Add Button */}\n//       <IconButton onClick={handleAddClick}>\n//         <AddIcon />\n//       </IconButton>\n//     </>\n//   );\n// };\n\n// export default MyTable;\n\n\nimport React, { useEffect, useState } from 'react';\nimport { TableContainer, Table, TableHead, TableBody, TableRow, TableCell, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, Button, TextField } from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport EditIcon from '@mui/icons-material/Edit';\nimport firebase from '../firebase/firebase';\n\nconst MyTable = () => {\n    const [imageUrls, setImageUrls] = useState([]);\n    const [editDialogOpen, setEditDialogOpen] = useState(false);\n    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n    const [selectedId, setSelectedId] = useState(null);\n    const [editedData, setEditedData] = useState({});\n\n    useEffect(() => {\n        const fetchImages = async () => {\n            try {\n                const storageRef = firebase.storage().ref();\n                const imagesRef = storageRef.child('hero_section');\n                const imageList = await imagesRef.listAll();\n                // Get download URLs for each image\n                const urls = await Promise.all(\n                    imageList.items.map(async (imageRef) => {\n                        return await imageRef.getDownloadURL();\n                    })\n                );\n                setImageUrls(urls);\n            } catch (error) {\n                console.error('Error fetching images:', error);\n            }\n        };\n        fetchImages();\n    }, []);\n\n    const handleEditClick = (id) => {\n        // Handle edit action here\n    };\n\n    const handleUpload = async () => {\n        try {\n            if (!file) {\n                console.error('No file selected.');\n                return;\n            }\n\n            const storageRef = firebase.storage().ref();\n            const fileRef = storageRef.child(`hero_section/${fileName}`);\n            await fileRef.put(file);\n            console.log('File uploaded successfully.');\n\n            // Clear input field after successful upload\n            setFile(null);\n            setFileName('');\n        } catch (error) {\n            console.error('Error uploading file:', error);\n        }\n    };\n\n    const handleDeleteClick = (id) => {\n        setSelectedId(id);\n        setDeleteDialogOpen(true);\n    };\n\n    const handleEditSave = () => {\n        // Handle edit save action here\n        setEditDialogOpen(false);\n    };\n\n    const handleDeleteConfirm = async () => {\n        try {\n            const imageUrl = imageUrls[selectedId];\n            // Delete image from Firebase Storage\n            const storageRef = firebase.storage().refFromURL(imageUrl);\n            await storageRef.delete();\n\n            // Update state to remove deleted image\n            setImageUrls((prevImageUrls) =>\n                prevImageUrls.filter((url, index) => index !== selectedId)\n            );\n        } catch (error) {\n            console.error('Error deleting image:', error);\n        }\n        setDeleteDialogOpen(false);\n    };\n\n    return (\n        <><div>\n        <input\n          type=\"file\"\n          accept=\"image/*\"\n          onChange={handleFileChange}\n        />\n        <TextField\n          label=\"File Name\"\n          value={fileName}\n          disabled\n          fullWidth\n          sx={{ mt: 1 }}\n        />\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={handleUpload}\n          disabled={!file}\n          sx={{ mt: 1 }}\n        >\n          Upload\n        </Button>\n      </div>\n            <TableContainer>\n                <Table>\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Image</TableCell>\n                            <TableCell>Action</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {imageUrls.map((url, index) => (\n                            <TableRow key={index}>\n                                <TableCell>\n                                    <img src={url} alt={`Image ${index}`} width=\"50\" height=\"50\" />\n                                </TableCell>\n                                <TableCell>\n                                    <IconButton onClick={() => handleEditClick(index)}>\n                                        <EditIcon />\n                                    </IconButton>\n                                    <IconButton onClick={() => handleDeleteClick(index)}>\n                                        <DeleteIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n\n            {/* Edit Dialog */}\n            <Dialog open={editDialogOpen} onClose={() => setEditDialogOpen(false)}>\n                <DialogTitle>Edit Image</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Edit the image details:</DialogContentText>\n                    {/* Add input fields for editing */}\n                    <Button onClick={handleEditSave}>Save</Button>\n                </DialogContent>\n            </Dialog>\n\n            {/* Delete Confirmation Dialog */}\n            <Dialog open={deleteDialogOpen} onClose={() => setDeleteDialogOpen(false)}>\n                <DialogTitle>Delete Image</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>Are you sure you want to delete this image?</DialogContentText>\n                    <Button onClick={handleDeleteConfirm}>Confirm</Button>\n                    <Button onClick={() => setDeleteDialogOpen(false)}>Cancel</Button>\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n};\n\nexport default MyTable;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,cAAc,EAAEC,KAAK,EAAEC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,UAAU,EAAEC,MAAM,EAAEC,WAAW,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,MAAM,EAAEC,SAAS,QAAQ,eAAe;AACtL,OAAOC,UAAU,MAAM,4BAA4B;AACnD,OAAOC,QAAQ,MAAM,0BAA0B;AAC/C,OAAOC,QAAQ,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACl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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}